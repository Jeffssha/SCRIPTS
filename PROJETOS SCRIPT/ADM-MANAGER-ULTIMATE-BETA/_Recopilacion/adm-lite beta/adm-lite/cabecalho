#!/bin/bash
clear
_tmp="usuarios_cache"
_tmp2="usuarios_cache2"
_tmp3="usuarios_cache3"
_tmp4="usuarios_cache4"
_dr="idioma"
_dr2="idioma.bak"
dir_user="./userDIR"
tempousers="./tempo_conexao"
if [ -e $_tmp ]; then
rm $_tmp
fi
if [ -e $_tmp2 ]; then
rm $_tmp2
fi
if [ -e $_tmp3 ]; then
rm $_tmp3
fi
if [ -e $_tmp4 ]; then
rm $_tmp4
fi
#######SISTEMADEMODULOS##########

unset OPENVPN
if [[ -e /etc/openvpn/server.conf ]]; then
 if [[ -e /etc/openvpn/openvpn-status.log ]]; then
OPENVPN="on"
 else
echo -e "\033[1;31mFOI IDENTIFICADO A TENTATIVA DE INSTALAR O OPENVPN... POREM ELE NAO FOI INSTALADO CORRETAMENTE, O SCRIPT PODERA APRESENTAR MAU FUNCIONAMENTO!!!, E RECOMENDADO A REINSTALAÇÃO DO SCRIPT DE FORMA CORRETA!\033[0m"
sleep 5s
 fi
fi

#OPENSSH=on/off
#DROPBEAR=on/off
#VERIFICAR=on/off

_modulos="./modulos"
if [ -e "$_modulos" ]; then
while read _module; do
if [ "$_module" = "OPENSSH" ]; then
OPENSSH="on"
fi
if [ "$_module" = "DROPBEAR" ]; then
DROPBEAR="on"
fi
if [ "$_module" = "VERIFICAR" ]; then
VERIFICAR="on"
fi
done < $_modulos
 else
touch $_modulos
fi

#PIDSVARIAVEIS
unset pid_badvpn
pid_badvpn=$(netstat -nlpt | egrep -o udpgw)
unset fail2_ban
fail2_ban=$(dpkg -l | grep fail2ban | grep ii)
#TERMINO

if [ ! -d "$dir_user" ]; then
mkdir $dir_user
fi

funcao_addcores () {
if [ "$1" = "0" ]; then
cor[$2]="\033[0m"
fi
if [ "$1" = "1" ]; then
cor[$2]="\033[1;31m"
fi
if [ "$1" = "2" ]; then
cor[$2]="\033[1;32m"
fi
if [ "$1" = "3" ]; then
cor[$2]="\033[1;33m"
fi
if [ "$1" = "4" ]; then
cor[$2]="\033[1;34m"
fi
if [ "$1" = "5" ]; then
cor[$2]="\033[1;35m"
fi
if [ "$1" = "6" ]; then
cor[$2]="\033[1;36m"
fi
if [ "$1" = "7" ]; then
cor[$2]="\033[1;37m"
fi
}

_cores="./cores"
if [ -e $_cores ]; then
_cont="0"
while read _cor; do
funcao_addcores $_cor $_cont
_cont=$(($_cont + 1))
done < $_cores
else
cor[0]="\033[0m"
cor[1]="\033[1;34m"
cor[2]="\033[1;31m"
cor[3]="\033[1;37m"
cor[4]="\033[1;36m"
cor[5]="\033[1;33m"
cor[6]="\033[1;35m"
fi

if [ -e "./admtxt" ]; then
mv -f ./admtxt ./idioma
fi
if [ "${txt[0]}" = "" ]; then
source idioma_geral
fi

_system=$(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //')
if [ "$_os" = "" ]; then
echo "$_system" > $_tmp
read system[1] < $_tmp
system[2]=$(echo ${system[1]} | awk '{print $1, $2}')
_os="\033[1;31m${system[2]}"
fi


_on="\033[1;32m${txt[10]}"
_off="\033[1;31m${txt[11]}"
teste_cache="#CACHE DO SQUID"
if [ -e /etc/squid/squid.conf ]; then
squid_var="/etc/squid/squid.conf"
if [[ `grep -c "^$teste_cache" $squid_var` -eq 0 ]]; then
_cachesquid="$_off"
 else
_cachesquid="$_on"
fi
else
 if [ -e /etc/squid3/squid.conf ]; then
squid_var="/etc/squid3/squid.conf"
if [[ `grep -c "^$teste_cache" $squid_var` -eq 0 ]]; then
_cachesquid="$_off"
 else
_cachesquid="$_on"
fi
 fi
fi
if [ "$pid_badvpn" != "" ]; then
_badvpn="$_on"
 else
_badvpn="$_off"
fi
if [[ `grep -c "^#ADM" /etc/sysctl.conf` -eq 0 ]]; then
_tcpspeed="$_off"
 else
_tcpspeed="$_on"
fi
if [ "$fail2_ban" = "" ]; then
fail_b="$_off"
 else
fail_b="$_on"
fi
if [ "$VERIFICAR" = "on" ]; then
VERIFICAR_PID="$_on"
else
VERIFICAR_PID="$_off"
fi

if [ -e onlines ]; then
__onl=$(cat onlines)
__onlines="\033[1;31m$__onl"
fi
if [ "$__onlines" = "" ]; then
__onlines="$_off"
fi

if [ -e vencidos ]; then
__ven=$(cat vencidos)
__vencidos="\033[1;31m$__ven"
fi
if [ "$__vencidos" = "" ]; then
__vencidos="$_off"
fi

funcao_verificacao () {
if [ ! -e $_modulos ]; then
touch $_modulos
fi
if [ "$VERIFICAR" = "on" ]; then
active_verif=$(cat $_modulos | egrep -v "VERIFICAR")
echo "$active_verif" > $_modulos
 for _pids_ in `atq | awk '{print $1}'`; do
 atrm $_pids_
 done
crontab -r
rm vencidos
rm onlines
else
echo "VERIFICAR" >> $_modulos
echo "at -f /bin/cron now + 1 min
/etc/adm-lite/verifica &" > /bin/cron
chmod 777 /bin/cron
chmod 777 /etc/adm-lite/*
bash /bin/cron
fi
unset VERIFICAR
unset __onlines
unset __vencidos
}

funcao_cores2 () {
if [ "$1" = "1" ]; then
echo -e "\033[1;31m${txt[25]}"
sleep 1s
echo "1" >> $2
fi
if [ "$1" = "2" ]; then
echo -e "\033[1;32m${txt[25]}"
sleep 1s
echo "2" >> $2
fi
if [ "$1" = "3" ]; then
echo -e "\033[1;33m${txt[25]}"
sleep 1s
echo "3" >> $2
fi
if [ "$1" = "4" ]; then
echo -e "\033[1;34m${txt[25]}"
sleep 1s
echo "4" >> $2
fi
if [ "$1" = "5" ]; then
echo -e "\033[1;35m${txt[25]}"
sleep 1s
echo "5" >> $2
fi
if [ "$1" = "6" ]; then
echo -e "\033[1;36m${txt[25]}"
sleep 1s
echo "6" >> $2
fi
if [ "$1" = "7" ]; then
echo -e "\033[1;37m${txt[25]}"
sleep 1s
echo "7" >> $2
fi
if [ "$1" -gt "7" ]; then
rm $2
funcao_cores1
fi
}

funcao_cores1 () {
if [ "$6" = "" ]; then
echo -e "${cor[5]} ${txt[24]} ${cor[0]}"
sleep 2s
return
fi
echo "0" > $1
funcao_cores2 $2 $1
funcao_cores2 $3 $1
funcao_cores2 $4 $1
funcao_cores2 $5 $1
funcao_cores2 $6 $1
funcao_cores2 $7 $1
}

funcao_cores () {
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[5]} ${txt[21]}"
echo -e "${cor[1]} • AABBCCDDEEFF"
echo -e "${cor[2]} • AABBCCDDEEFF"
echo -e "${cor[3]} • AABBCCDDEEFF"
echo -e "${cor[4]} • AABBCCDDEEFF"
echo -e "${cor[5]} • AABBCCDDEEFF"
echo -e "${cor[6]} • AABBCCDDEEFF"
ncor[1]="\033[1;31m"
ncor[2]="\033[1;32m"
ncor[3]="\033[1;33m"
ncor[4]="\033[1;34m"
ncor[5]="\033[1;35m"
ncor[6]="\033[1;36m"
ncor[7]="\033[1;37m"
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${ncor[1]} [1]•AA ${ncor[2]} [2]•AA ${ncor[3]} [3]•AA"
echo -e "${ncor[4]} [4]•AA ${ncor[5]} [5]•AA ${ncor[6]} [6]•AA"
echo -e "${ncor[7]} [7]•AA"
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[5]} ${txt[22]}"
unset ncor
read -p " ${txt[23]} " _cores_
funcao_cores1 $_cores $_cores_
}

fun_translate () {
source trans -b pt:$1 "$2" >> "$3"
}

funcao_idioma () {
idioma[1]="af Afrikaans"
idioma[2]="sq Albanian"
idioma[3]="ar Arabic"
idioma[4]="eu Basque"
idioma[5]="bg Bulgarian"
idioma[6]="be Belarusian"
idioma[7]="ca Catalan"
idioma[8]="zh Chinese"
idioma[9]="hr Croatian"
idioma[10]="cs Czech"
idioma[11]="da Danish"
idioma[12]="nl Dutch"
idioma[13]="en English"
idioma[14]="et Estonian"
idioma[15]="fo Faeroese"
idioma[16]="fa Farsi"
idioma[17]="fi Finnish"
idioma[18]="fr Franch"
idioma[19]="gd Gaelic"
idioma[20]="ga Irish"
idioma[21]="de German"
idioma[22]="el Greek"
idioma[23]="he Hebrew"
idioma[24]="hi Hindi"
idioma[25]="hu Hungarian"
idioma[26]="is Icelandic"
idioma[27]="id Indonesian"
idioma[28]="it Italian"
idioma[29]="ja Japanese"
idioma[30]="ko Korean"
idioma[31]="lv Latvian"
idioma[32]="lt Lithuanian"
idioma[33]="mk Macedonian"
idioma[34]="ms Malaysian"
idioma[35]="mt Maltese"
idioma[36]="no Norwegian"
idioma[37]="no Norwegian"
idioma[38]="pl Polish"
idioma[39]="pt Portuguese"
idioma[40]="rm Romanic"
idioma[41]="ro Romanian"
idioma[42]="ru Russian"
idioma[43]="sz Sami"
idioma[44]="sr Serbian"
idioma[45]="sk Slovak"
idioma[46]="sl Slovenian"
idioma[47]="sb Sorbian"
idioma[48]="es Spanish"
idioma[49]="sx Sutu"
idioma[50]="sv Swedish"
idioma[51]="th Thai"
idioma[52]="ts Tsonga"
idioma[53]="tn Tswana"
idioma[54]="tr Turkish"
idioma[55]="uk Reino"
idioma[56]="ur Urdu"
idioma[57]="ve Venda"
idioma[58]="vi Vietnamese"
idioma[59]="xh Xhosa"
idioma[60]="ji Yiddish"
idioma[61]="zu Zulu"
i="1"
echo -e "${cor[1]} ===================================================================== ${cor[0]}"
echo -e "${cor[5]} ${txt[77]} ${txt[78]}
 ${txt[79]}
 ${txt[80]}"
echo -e "${cor[1]} ===================================================================== ${cor[3]}"
while true; do
if [ "${idioma[$i]}" = "" ]; then
break
fi
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto1=$(printf '%-20s' "[ $i ]-$a")
i=$(($i+1))
if [ "${idioma[$i]}" = "" ]; then
break
fi
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto2=$(printf '%-20s' "[ $i ]-$a")
i=$(($i+1))
if [ "${idioma[$i]}" = "" ]; then
break
fi
a=$(echo ${idioma[$i]} | awk '{print $2}')
texto3=$(printf '%-20s' "[ $i ]-$a")
echo -e "$texto1 $texto2 $texto3"
done
echo -e "${cor[1]} ===================================================================== ${cor[0]}"
echo -e " ${txt[82]}"
read -p " => " idiom
number_var $idiom > /dev/null 2>&1
if [ "$var_number" != "" ]; then
 if [ "${idioma[$idiom]}" != "" ]; then
 id=$(echo ${idioma[$idiom]} | awk '{print $1}')
 fi
else
 if [ "$(echo "$idiom" | wc -w)" -lt "3" ]; then
  if [ "$(echo "${idioma[@]}" | grep "$idiom")" != "" ]; then
 id="$idiom"
  fi
 fi
fi
if [ "$id" = "" ]; then
echo -e " Idioma Nao Escolhido"
sleep 2s
source menu
exit
fi
traduzir $id > /dev/null 2>&1 &
while true; do
echo -ne "${cor[2]}["
 for ((q=1; q <= 20 ; q++)); do
 echo -ne "${cor[3]}X"
 sleep 0.5s
 done
if [ -e $HOME/fim ]; then
echo -ne "${cor[2]}] - \033[1;32m[OK][100%]"
break
 else
echo -ne "${cor[2]}] - ${cor[3]} ${txt[81]}"
echo ""
fi
done
rm $HOME/fim
echo ""
echo -e "${cor[1]} ===================================================================== ${cor[0]}"
echo -e "\033[0m"
unset idioma
exit
}

traduzir () {
_lingua="$1"
if [ "$_lingua" = "pt" ]; then
rm $_dr > /dev/null 2>&1
touch $HOME/fim
exit
fi
apt-get install gawk -y > /dev/null 2>&1
if [ -e "./admtxt" ]; then 
rm ./admtxt
fi
touch ./admtxt
while read _texto; do
fun_translate $_lingua "$_texto" "./admtxt"
#source trans -b pt:$_lingua "$_texto" >> "$_dr"
done < $_dr2
unset txt
touch $HOME/fim
exit
}

select_users () {
_cont="1"
touch $_tmp3
for u in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
echo "$_cont $u" >> $_tmp3
echo -e "${cor[2]} |$_cont|•${cor[5]} $u"
if [ "$u" = "" ]; then 
break
fi
_cont=$(($_cont + 1))
done
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[5]} ${txt[42]}"
echo -ne "${cor[6]}"
read -p " ${txt[9]} " select_user
if [ "$select_user" = "" ]; then
echo -e "${cor[5]} ${txt[43]}"
return
 fi
 if [ "$select_user" -le "$_cont" ] 1> /dev/null 2> /dev/null
then
select_name=$(cat $_tmp3 | head -$select_user | tail -1 | awk '{print $2}')
echo -e "${cor[5]} $name"
 else
 if cat /etc/passwd |grep $select_user: > /dev/null
then
select_name="$select_user"
else
echo -e "${cor[5]} ${txt[44]}"
echo -e "${cor[5]} ${txt[49]}"
sleep 5s
return
  fi
 fi
unset select_user
##PREENXE_VARIAVEL_$select_name##
}

meu_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
if [[ "$MEU_IP" != "$MEU_IP2" ]]; then
IP="$MEU_IP2"
 else
IP="$MEU_IP"
fi
#PREENXE A VARIAVEL $IP
}

remover_adm () {
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[5]} ${txt[209]}"
read -p " [ s / n ]: " certe_za
if [[ "$certe_za" = "s" || "$certe_za" = "S" ]]; then
bash ./instalar 0 & > /dev/null 2>&1
while true; do
echo -ne "${cor[2]}["
 for ((q=1; q <= 20 ; q++)); do
 echo -ne "${cor[3]}X"
 sleep 0.5s
 done
if [ -e $HOME/fim ]; then
echo -ne "${cor[2]}] - \033[1;32m[OK][100%]"
break
 else
echo -ne "${cor[2]}] - ${cor[3]}Aguarde!"
echo ""
fi
done
echo -e "\033[0m"
echo -e "${cor[1]} =================================== ${cor[0]}"
exit
fi
echo -e "${cor[1]} ${txt[210]} ${cor[0]}"
echo -e "${cor[1]} =================================== ${cor[0]}"
return
}

fun_filez () {
arq="/etc/adm-lite/$1"
arq2="$HOME/update/$1"
if [ ! -e "/etc/adm-lite/$1" ]; then
mv -f $arq2 $arq
return
fi
equal=$(diff -q $arq $arq2)
echo -e "\033[1;31m ${txt[203]}: $1"
if [ "$equal" = "" ]; then
rm $arq2
else
mv -f $arq2 $arq
chmod -x $arq
lista_atualizados=$(($lista_atualizados + 1))
echo -e "\033[1;32m ${txt[204]}: $1 - ${txt[205]}!"
sleep 0.5s
echo ""
fi
}

ofuscate_fun () {
number=$(expr length $1)
for ((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
if [ "${txt[$i]}" = "." ]; then
txt[$i]="#"
else
 if [ "${txt[$i]}" = "#" ]; then
txt[$i]="."
 fi
fi
if [ "${txt[$i]}" = "1" ]; then
txt[$i]="@"
else
 if [ "${txt[$i]}" = "@" ]; then
txt[$i]="1"
 fi
fi
if [ "${txt[$i]}" = "2" ]; then
txt[$i]="?"
else
 if [ "${txt[$i]}" = "?" ]; then
txt[$i]="2"
 fi
fi
if [ "${txt[$i]}" = "3" ]; then
txt[$i]="&"
else
 if [ "${txt[$i]}" = "&" ]; then
txt[$i]="3"
 fi
fi
if [ ! -e $HOME/tmp ]; then
touch $HOME/tmp
fi
echo -ne "${txt[$i]}" >> $HOME/tmp
done
txtofus=$(cat $HOME/tmp)
if [ -e $HOME/tmp ]; then
rm $HOME/tmp
fi
link_list=$(echo $txtofus | rev)
}

fun_atualizar () {
cd $HOME
if [ -e $HOME/lista ]; then
rm $HOME/lista
fi
echo -e "${cor[1]} =================================== ${cor[0]}"
sleep 3s
read -p " DIGITE A KEY: " key_key
key[1]=$(echo "$key_key" | awk -F "∆" '{print $2}')
key[2]=$(echo "$key_key" | awk -F "∆" '{print $1}')
ofuscate_fun ${key[2]}
echo -e "${cor[2]} Verificando Key: ${cor[3]}$key_key"
wget -O lista http://$link_list/${key[1]}/lista -o /dev/null
if [ "$(cat $HOME/lista | grep $link_list/${key[1]})" = "" ]; then
echo -e "${cor[2]}  ${txt[208]}"
echo -e "${cor[1]} ================================== ${cor[0]}"
return
fi
echo -e "${cor[2]} OK, key: ${cor[3]}$key_key${cor[2]} ${txt[207]}"
echo -e "${cor[1]} =================================== ${cor[0]}"
cd $HOME
if [ ! -d ./update ]; then
mkdir ./update
fi
cd ./update
while read arq_adm; do
wget $arq_adm -o /dev/null
done < $HOME/lista
for arqs in `ls $HOME/update`; do
fun_filez $arqs
done
rm $HOME/lista
rm -rf $HOME/update
if [ "$lista_atualizados" != "" ]; then
echo -e "${cor[5]} $lista_atualizados ${txt[206]}"
rm /etc/adm-lite/idioma
rm /etc/adm-lite/idioma.bak
fi
echo -e "${cor[1]} =================================== ${cor[0]}"
}

fun_sem () {
sed -e "s;auth-user-pass;<auth-user-pass>\n$1\n$2\n</auth-user-pass>;g" $HOME/$1.ovpn > $HOME/teste.ovpn && mv -f $HOME/teste.ovpn $HOME/$1.ovpn
zip $HOME/$1.zip $HOME/$1.ovpn
rm $HOME/$1.ovpn
}

newclient () {
# Generates the custom client.ovpn
cp /etc/openvpn/client-common.txt ~/$1.ovpn
echo "<ca>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
echo "</ca>" >> ~/$1.ovpn
echo "<cert>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
echo "</cert>" >> ~/$1.ovpn
echo "<key>" >> ~/$1.ovpn
cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
echo "</key>" >> ~/$1.ovpn
echo "<tls-auth>" >> ~/$1.ovpn
cat /etc/openvpn/ta.key >> ~/$1.ovpn
echo "</tls-auth>" >> ~/$1.ovpn
}

open_1 () {
CLIENT="$1"
senha="$2"
daysrnf="$3"
limit="$4"
sen="$5"
cd /etc/openvpn/easy-rsa/
./easyrsa build-client-full $CLIENT nopass
newclient "$CLIENT"
echo ""
echo "$CLIENT KEY" ~/"$CLIENT.ovpn"
valid=$(date '+%C%y-%m-%d' -d " +$daysrnf days")
datexp=$(date "+%d/%m/%Y" -d "+ $daysrnf days")
useradd -M -s /bin/false -d /home/ovpn/ $CLIENT -e $valid
usermod -p $(openssl passwd -1 $senha) $CLIENT
if [[ "$sen" = "s" || "$sen" = "S" ]]; then
fun_sem $CLIENT $senha 
fi
cd /etc/adm-lite
echo "senha: $senha" > $dir_user/$CLIENT
echo "limite: $limit" >> $dir_user/$CLIENT
echo "data: $valid" >> $dir_user/$CLIENT
}

open_2 () {
CLIENT="$1"
cd /etc/openvpn/easy-rsa/
./easyrsa --batch revoke $CLIENT
./easyrsa gen-crl
rm -rf pki/reqs/$CLIENT.req
rm -rf pki/private/$CLIENT.key
rm -rf pki/issued/$CLIENT.crt
rm -rf /etc/openvpn/crl.pem
cp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem
chown nobody:$GROUPNAME /etc/openvpn/crl.pem
echo ""
userdel --force $CLIENT
cd /etc/adm-lite
if [ -e $dir_user/$CLIENT ]; then
rm $dir_user/$CLIENT
fi
}

##Port System By Luis :D

open_port () {
#arquivo=$1
#troca=$2
#porta=$3
tmp_arq="/tmp/arq-tmp"
 while read arquivo; do
if [ ! -e "$tmp_arq" ]; then
echo "$arquivo" > $tmp_arq
else
echo "$arquivo" >> $tmp_arq
fi
if [ "$(echo "$arquivo" | awk '{print $1}')" = "$2" ]; then
 if [ "$(cat $tmp_arq | grep "$2 $3" | wc -l)" = "0" ]; then
 echo "$2 $3" >> $tmp_arq
 fi
fi
done < $1
mv -f $tmp_arq $1
}

open_dropbear () {
tmp_arq="/tmp/arq-tmp"
arquivo="/etc/default/dropbear"
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
sed "s;-p $porta ;;g" $arquivo > $tmp_arq
mv -f $tmp_arq $arquivo
service dropbear restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
porta="$newport"
sed -i "s/443/$porta -p 443/g" $arquivo
service dropbear restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

open_squid () {
tmp_arq="/tmp/arq-tmp"
if [ -d "/etc/squid" ]; then
arquivo="/etc/squid/squid.conf"
elif [ -d "/etc/squid3" ]; then
arquivo="/etc/squid3/squid.conf"
fi
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
cat $arquivo | grep -v "http_port $porta" > $tmp_arq
mv -f $tmp_arq $arquivo
service squid3 restart > /dev/null 2>&1 &
service squid restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
open_port "$arquivo" "http_port" "$newport"
service squid3 restart > /dev/null 2>&1 &
service squid restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

open_ssh () {
tmp_arq="/tmp/arq-tmp"
arquivo="/etc/ssh/sshd_config"
echo -e "${cor[2]} |1|•${cor[5]} ${txt[279]}"
echo -e "${cor[2]} |2|•${cor[5]} ${txt[280]}\033[1;37m"
read -p " [ 1 / 2 ]: " escolhaas
if [ "$escolhaas" = "1" ]; then
porta="$1"
cat $arquivo | grep -v "Port $porta" > $tmp_arq
mv -f $tmp_arq $arquivo
service ssh restart > /dev/null 2>&1 &
service sshd restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
elif [ "$escolhaas" = "2" ]; then
read -p " Nova Porta: " newport
open_port "$arquivo" "Port" "$newport"
service ssh restart > /dev/null 2>&1 &
service sshd restart > /dev/null 2>&1 &
sleep 2s
echo -e "${cor[5]} ${txt[281]}"
return
fi
}

minhas_portas () {
echo -e "${cor[1]} =================================== ${cor[4]}"
portas_var="/tmp/portas"
porta_var="/tmp/portas2"
lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN" > $portas_var
while read port; do
var1=$(echo $port | awk '{print $1}')
var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
 if [ ! -e "$porta_var" ]; then
 echo -e "$var1 $var2" > $porta_var
 fi
 if [ "$(cat $porta_var | grep "$var1" | grep "$var2")" = "" ]; then
 echo -e "$var1 $var2" >> $porta_var
 fi
done < $portas_var
i=1
while read pts; do
 if [ "$pts" = "" ]; then
 break
 fi
service_porta[$i]=$(echo "$pts" | awk '{print $2}')
service_serv[$i]=$(echo "$pts" | awk '{print $1}')
echo -e " [$i] -> ${service_serv[$i]} : ${service_porta[$i]}"
i=$(($i+1))
done < $porta_var
echo -e "${cor[5]} ${txt[277]}"
echo -e "${cor[1]} =================================== \033[1;37m"
read -p " [1-$(($i-1))]: " nun
echo -e "\033[1;31m ${txt[283]} \033[1;32m${service_porta[$nun]}\033[1;31m : \033[1;32m${service_serv[$nun]}\033[0m"
rm $portas_var
rm $porta_var
echo -e "${cor[1]} =================================== ${cor[0]}"
if [ "${service_serv[$nun]}" = "dropbear" ]; then
open_dropbear ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "sshd" ]; then
open_ssh ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "squid3" ]; then
open_squid ${service_porta[$nun]}
elif [ "${service_serv[$nun]}" = "squid" ]; then
open_squid ${service_porta[$nun]}
else
echo -e "\033[1;31m ${txt[278]}\033[0m"
fi
echo -e "${cor[1]} =================================== ${cor[0]}"
}

## End Port System By Luis :D

number_var () {
unset var_number
if (echo "$1" | egrep '[^0-9]' &> /dev/null); then
echo -e "${cor[5]} ${txt[98]}"
else
var_number="$1"
fi
#Preenxe A Variável $var_number
}

if [ -e ./autoonline ]; then
rm ./autoonline
fi
credit=$(cat ./menu_credito)
#${cor[211]} 
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[2]} ∆ ${cor[3]} $credit"
echo -e "${cor[2]} √ ${cor[3]} ${txt[0]}"
echo -e "${cor[1]} =================================== ${cor[0]}"
echo -e "${cor[2]} ° ${cor[3]} ${txt[1]} $__onlines"
echo -e "${cor[2]} ° ${cor[3]} ${txt[2]} $__vencidos"
echo -e "${cor[2]} ° ${cor[3]} ${txt[3]} $_os"